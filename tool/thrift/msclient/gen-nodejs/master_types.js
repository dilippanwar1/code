//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
TrackMeta = module.exports.TrackMeta = function(args) {
  this.trackID = null;
  this.creator = null;
  this.modifier = null;
  this.uri = null;
  if (args) {
    if (args.trackID !== undefined) {
      this.trackID = args.trackID;
    }
    if (args.creator !== undefined) {
      this.creator = args.creator;
    }
    if (args.modifier !== undefined) {
      this.modifier = args.modifier;
    }
    if (args.uri !== undefined) {
      this.uri = args.uri;
    }
  }
};
TrackMeta.prototype = {};
TrackMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.trackID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.modifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.uri = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TrackMeta.prototype.write = function(output) {
  output.writeStructBegin('TrackMeta');
  if (this.trackID !== null && this.trackID !== undefined) {
    output.writeFieldBegin('trackID', Thrift.Type.I32, 1);
    output.writeI32(this.trackID);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 2);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.modifier !== null && this.modifier !== undefined) {
    output.writeFieldBegin('modifier', Thrift.Type.STRING, 3);
    output.writeString(this.modifier);
    output.writeFieldEnd();
  }
  if (this.uri !== null && this.uri !== undefined) {
    output.writeFieldBegin('uri', Thrift.Type.STRING, 4);
    output.writeString(this.uri);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

VersionMeta = module.exports.VersionMeta = function(args) {
  this.versionID = null;
  this.tracks = null;
  if (args) {
    if (args.versionID !== undefined) {
      this.versionID = args.versionID;
    }
    if (args.tracks !== undefined) {
      this.tracks = args.tracks;
    }
  }
};
VersionMeta.prototype = {};
VersionMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.versionID = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tracks = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.TrackMeta();
          elem6.read(input);
          this.tracks.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VersionMeta.prototype.write = function(output) {
  output.writeStructBegin('VersionMeta');
  if (this.versionID !== null && this.versionID !== undefined) {
    output.writeFieldBegin('versionID', Thrift.Type.I32, 1);
    output.writeI32(this.versionID);
    output.writeFieldEnd();
  }
  if (this.tracks !== null && this.tracks !== undefined) {
    output.writeFieldBegin('tracks', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tracks.length);
    for (var iter7 in this.tracks)
    {
      if (this.tracks.hasOwnProperty(iter7))
      {
        iter7 = this.tracks[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectMeta = module.exports.ProjectMeta = function(args) {
  this.name = null;
  this.owners = null;
  this.collaborators = null;
  this.versions = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.owners !== undefined) {
      this.owners = args.owners;
    }
    if (args.collaborators !== undefined) {
      this.collaborators = args.collaborators;
    }
    if (args.versions !== undefined) {
      this.versions = args.versions;
    }
  }
};
ProjectMeta.prototype = {};
ProjectMeta.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.owners = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.owners.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.collaborators = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readString();
          this.collaborators.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.versions = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = new ttypes.VersionMeta();
          elem28.read(input);
          this.versions.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectMeta.prototype.write = function(output) {
  output.writeStructBegin('ProjectMeta');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.owners !== null && this.owners !== undefined) {
    output.writeFieldBegin('owners', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.owners.length);
    for (var iter29 in this.owners)
    {
      if (this.owners.hasOwnProperty(iter29))
      {
        iter29 = this.owners[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.collaborators !== null && this.collaborators !== undefined) {
    output.writeFieldBegin('collaborators', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.collaborators.length);
    for (var iter30 in this.collaborators)
    {
      if (this.collaborators.hasOwnProperty(iter30))
      {
        iter30 = this.collaborators[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.versions !== null && this.versions !== undefined) {
    output.writeFieldBegin('versions', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.versions.length);
    for (var iter31 in this.versions)
    {
      if (this.versions.hasOwnProperty(iter31))
      {
        iter31 = this.versions[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

